
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  progress      ProblemProgress[]
  studyPlan     StudyPlan[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Pattern {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  color       String
  icon        String
  order       Int
  problems    Problem[]
  createdAt   DateTime  @default(now())
}

model Problem {
  id              String    @id @default(cuid())
  title           String
  leetcodeNumber  Int       @unique
  difficulty      Difficulty
  pattern         Pattern   @relation(fields: [patternId], references: [id])
  patternId       String
  description     String?   @db.Text
  solution        String?   @db.Text
  timeComplexity  String?
  spaceComplexity String?
  companies       Company[]
  hints           String[]
  tags            String[]
  frequency       Frequency @default(MEDIUM)
  isBlind75       Boolean   @default(false)
  isNeetCode      Boolean   @default(false)
  isAdvanced      Boolean   @default(false)
  order           Int
  approach        String?   @db.Text
  keyPoints       String[]
  relatedProblems String[]
  createdAt       DateTime  @default(now())
  
  progress        ProblemProgress[]
}

model Company {
  id       String    @id @default(cuid())
  name     String    @unique
  problems Problem[]
}

model ProblemProgress {
  id          String     @id @default(cuid())
  userId      String
  problemId   String
  status      ProblemStatus @default(NOT_STARTED)
  attempts    Int        @default(0)
  timeSpent   Int        @default(0) // in minutes
  notes       String?    @db.Text
  lastAttempt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem     Problem    @relation(fields: [problemId], references: [id], onDelete: Cascade)
  
  @@unique([userId, problemId])
}

model StudyPlan {
  id          String     @id @default(cuid())
  userId      String
  name        String
  description String?
  totalDays   Int        @default(90)
  currentDay  Int        @default(1)
  isActive    Boolean    @default(true)
  startDate   DateTime   @default(now())
  endDate     DateTime?
  planType    PlanType   @default(ENHANCED)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions    StudySession[]
}

model StudySession {
  id          String     @id @default(cuid())
  studyPlanId String
  day         Int
  date        DateTime
  problemIds  String[]   // Array of problem IDs for this day
  isCompleted Boolean    @default(false)
  notes       String?    @db.Text
  createdAt   DateTime   @default(now())
  
  studyPlan   StudyPlan  @relation(fields: [studyPlanId], references: [id], onDelete: Cascade)
  
  @@unique([studyPlanId, day])
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Frequency {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum ProblemStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  MASTERED
}

enum PlanType {
  BASIC
  ENHANCED
  CUSTOM
}
